---
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import { languages } from '../i18n/ui';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const { title } = Astro.props.frontmatter || Astro.props;

---
<html lang={lang}>
  <head>
  <title>{title}</title>
  <meta charset="UTF-8">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>

  </head>
  <body>
    <div class="navbar navbar-default" role="navigation">
		<div class="container-fluid">
			<div class="navbar-header logo">
		  <a class="navbar-brand" href="#">Pneuma Solutions</a>
<br>        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
			Navigation <span class="navbar-toggler-icon"></span>
		  </button>
				</div>

		 <div class="collapse navbar-collapse" id="navbarContent">
			<ul class="navbar-nav mr-auto mt-2 mt-lg-0" id="navList">
			<li class="nav-item"><a class="nav-link" href="../">{t('nav.welcome')}</a></li>
			<li class="nav-item"><a class="nav-link" href={`../../${lang}/systemspecs`}>{t('nav.systemspecs')}</a></li>
			<li class="nav-item"><a class="nav-link" href={`../../${lang}/installation`}>{t('nav.installation')}</a></li>
			<li class="nav-item"><a class="nav-link" href={`../../${lang}/gettingconnected`}>{t('nav.gettingconnected')}</a></li>
			<li class="nav-item"><a class="nav-link" href={`../../${lang}/workingwithsessions`}>{t('nav.workingwithsessions')}</a></li>
			<li class="nav-item"><a class="nav-link" href={`../../${lang}/dashboard`}>{t('nav.dashboard')}</a></li>
			<li class="nav-item"><a class="nav-link" href={`../../${lang}/faq`}>{t('nav.faq')}</a></li>
			<li class="nav-item"><a class="nav-link" href={`../../${lang}/pricing`}>{t('nav.pricing')}</a></li>
			<li class="nav-item"><a class="nav-link" href={`../../${lang}/changelog`}>{t('nav.changelog')}</a></li>
		</ul>
</div>
</div>
</div>
<main>
		<h1>{title}</h1>
    <slot />
</main>
<footer>
	<button id="prevBtn">Previous Chapter</button>
	<button id="nextBtn">Next Chapter</button>

	<button id="changeLang">{t('footer.langChange')}</button>
	<ul id="langMenu" style="display: none";>
	  {Object.entries(languages).map(([lang, label]) => (
		<li>
		  <a href={`/${lang}/`}>{label}</a>
		</li>
	  ))}
	</ul>
	<audio  id="pageTurn">
	<source src="../../components/page.mp3" type="audio/mpeg">
	<source src="../../components/page.wav" type="audio/wav">
	</audio>
	<script>
		    const sections = document.querySelectorAll('#navList li');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
	const urlParams = new URLSearchParams(window.location.search);
const initialSectionIndex = parseInt(urlParams.get('section')) || 0;
let currentSectionIndex = parseInt(localStorage.getItem('currentSectionIndex')) || 0;
	function updateButtons() {
    prevBtn.disabled = currentSectionIndex === 0;
    nextBtn.disabled = currentSectionIndex === sections.length - 1;
}
    function loadLink(index) {
        const link = sections[index].querySelector('a');
        if (link) {
			const url = new URL(link.href);
			url.searchParams.set('section', index.toString());
			window.location.href = url.toString();
		}
    }

    prevBtn.addEventListener('click', () => {
        if (currentSectionIndex > 0) {
            currentSectionIndex--;
            updateButtons();
			turnThePage();

            loadLink(currentSectionIndex);
        }
    });

    nextBtn.addEventListener('click', () => {
        if (currentSectionIndex < sections.length - 1) {
            currentSectionIndex++;
            updateButtons();
			turnThePage();

            loadLink(currentSectionIndex);
        }
    });
	window.addEventListener('beforeunload', () => {
    localStorage.setItem('currentSectionIndex', currentSectionIndex.toString());
});
function turnThePage() {
	const pageTurn= document.getElementById("pageTurn");
	pageTurn.play();
}
    // Initial setup
    updateButtons();
	function ariaAlert(message) {
		const alertDiv = document.createElement('div');
		alertDiv.setAttribute('role', 'alert');
		alertDiv.textContent = message;
		alertDiv.style.position = 'absolute';
		alertDiv.style.left = '-9999px';
		document.body.appendChild(alertDiv);
		setTimeout(() => {
			document.body.removeChild(alertDiv);
		}, 1000);
	}
	document.getElementById('changeLang').addEventListener('click', () => {
		const languageList = document.getElementById('langMenu');
		if (languageList.style.display === 'none') {
		  languageList.style.display = 'block';
		  ariaAlert("Select a language from the list below.");
		} else {
		  languageList.style.display = 'none';
		  ariaAlert("Keeping language as is.");
		}
	  });
	  </script>

</footer>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3" crossorigin="anonymous"></script>
</body>
</html>